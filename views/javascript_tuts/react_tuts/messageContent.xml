<?xml version="1.0" encoding="UTF-8"?>
 <chapters>
  <chapter>
       <subject>ES6 import and export in browser</subject>
       <content>
           <subtitle>ES6 import and export in browser files</subtitle>
           <paragraph>
               <info>Create main.js in a script folder as below that have import and react and react-dom </info>
               <example>
--------------------scripts/main.js------------------------
'use strict';

import React from 'react';
import ReactDOM from 'react-dom';

const title = 'My Minimal React Webpack Babel Setup is set';

ReactDOM.render(
  &lt;div>{title}&lt;/div>,
  document.getElementById('app')
);


 --------------------index.html------------------------
 //for runing bundle.js in a browser;

 &lt;!DOCTYPE html>
 &lt;html lang="en">
 &lt;head>
  &lt;meta charset="UTF-8">
  &lt;title>browserify outcome&lt;/title>
 &lt;/head>
 &lt;body>
 &lt;script src="bundle.js">&lt;/script>
 &lt;/body>
 &lt;/html>

 ------------------ ------------------ ------------------

               </example>
           </paragraph>
           <subtitle>ES6 import and export in browser setup</subtitle>
           <paragraph>
               <info>
                 ES6 import and export in browser: 
                 Some of the features of ES6 dont work directly in browser just yet. Therefore we need use transpilers and compilers to make it work.Below Is is simple set up using:
                 1) babel-cli = transpiler to ES5 or node.js code in command line
                 2) babel-preset-env = preset needed for transpiling could be diffrent as react etc.
                 2) babel-preset-react = preset needed for transpiling react into ES5 node.
                 3) browserify = compiler of node.js code to use in browser, allows to use module.exports and require(modules) features in a browser
               </info>
               <example>
--------------- project set up ---------------

npm init -f //start package.json with defaults 

--------------- install babel-cli ---------------

//babel-cli to use in command line only for this example

npm i babel-cli --save or -S (to list in dependencies);

--------------------------------------------------

               </example>
           </paragraph>
           <subtitle>install babel preset</subtitle>
           <paragraph>
               <info>npm i babel-preset-env -S 
               it will traspile your ES6 code into node.js code if you use export/import module feature (require in node.js)
               npm i babel-preset-react -S it will transpile react code into node.js code with require features 
               </info>
               <example>
--------------- install babel presets---------------

npm i babel-preset-env -S 
npm i babel-preset-react -S 

--------------------------------------------------
               </example>
           </paragraph>
           <subtitle>use presets in your package.json </subtitle>
           <paragraph>
               <info>U need to use preset previously installed. U could also make separte file called .babelrc as :

                --------------- .babelrc file as option---------------

                {
                  "presets": ["env","react"]
                }
                --------------------------------------------------

                but it is possible to set it in package.json so why not ;P

               </info>
               <example>
--------------- package.json part---------------

"babel": {
    "presets": [
      "env", "react"
    ]
}
--------------------------------------------------
               </example>
           </paragraph>
           <subtitle>run your babel command for traspiling to ES5</subtitle>
           <paragraph>
               <info>In this exaple we going to run evertying in command line but in real project you would use gulp, grunt or node commands in package.json</info>
               <example>
--------------- run bubel for folder scripts ---------------

//using local install babel ./node_modules/.bin/babel

./node_modules/.bin/babel  ./scripts --experimental --source-maps-inline -d ./lib

--------------------------------------------------

               </example>
           </paragraph>
           <subtitle>run browserfy</subtitle>
           <paragraph>
               <info>run browserfy to the main file:
               now we have traspiled version of files so it is time to compile main.js and run in browser
             </info>
               <example> 
----run browserify only on main.js (since the other depend on it exporting) ----

//using local install browserify ./node_modules/.bin/browserify

./node_modules/.bin/browserify lib/main.js -o bundle.js

----------------run bundle.js in browser ----------------------

open index.html 

//full example folder: simple_setup

---------------- ---------------- ----------------
            </example>
           </paragraph>
       </content>
   </chapter>
   <chapter>
       <subject>React Components</subject>
       <content>
           <subtitle>Functional Component no JSX</subtitle>
           <paragraph>
               <info>Functional Component is a stateless component that calls a function that returns either jsx or React.create() element</info>
               <example>
------------------Functional Component no jsx by-------------------------

React.createElement(HTMLElement,{ name: props.name },"content" or children);

const FunctionalComponent = (props) => {
      return React.createElement(
        "p",
        { name: props.name },
        "I am functional component"
      );
  };
} 

ReactDOM.render(&lt;FunctionalComponent name="Greg" />,document.getElementById('app'));


               </example>
           </paragraph>
           <subtitle>React Select => predifined value</subtitle>
           <paragraph>
               <info>In order to have Predifined Select option when you load or
                update the Select component you need to have selected prop present 
                with the values below:

               &lt;option selected={defaultV === option}>{option}&lt;/option>


               </info>
               <example>
//---------------

interface IProps {
  options: (number | string)[];
  eventHandler: (e: React.ChangeEvent) => void;
  defaultV?: number | string;
}

const SelectOptions = ({ options, eventHandler, defaultV }: IProps) => {

  console.log('defaultV', defaultV)

  return (
    &lt;select onChange={eventHandler}>
      { options.map((option, i) => &lt;option key={`option${i}`} value={option} selected={defaultV === option}>{option}&lt;/option>)}
    &lt;/select>
  );
}

export default SelectOptions;

//---------------

               </example>
           </paragraph>
           <subtitle>React Select => defualtValue</subtitle>
           <paragraph>
               <info>In order to have only DefaultValue option when you load or
                update the Select component you need to have defaultValue prop present in 
                Select with the values below. React calls this uncontrolled-component with 
                that behaviour With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled.To handle this case, you can specify a defaultValue attribute instead of value. Changing the value of defaultValue attribute after a component has mounted will not cause any update of the value in the DOM. defaultValue will not change.

               &lt;select defaultValue={defaultValue}&lt;/select>


               </info>
               <example>
//---------------

interface IProps {
  options: (number | string)[];
  eventHandler: (e: React.ChangeEvent) => void;
  defaultV?: number | string;
}

const SelectOptions = ({ options, eventHandler, defaultV }: IProps) => {

  console.log('defaultV', defaultV)

  return (
    &lt;select onChange={eventHandler} defaultValue={defaultV}>
      { options.map((option, i) => &lt;option key={`option${i}`} value={option}>{option}&lt;/option>)}
    &lt;/select>
  );
}

export default SelectOptions;

//---------------

               </example>
           </paragraph>
           <subtitle>Functional Component with JSX</subtitle>
           <paragraph>
               <info>Functional compoent in again Stateless compoents that accepts props as function argument and returns JSX syntax</info>
               <example>
------------------------- Functional Stateless component-----------

 const FunctionalComponent = (props) => &lt;p>I am functional component&lt;/p>

ReactDOM.render(&lt;FunctionalComponent name="Greg" />,document.getElementById('app'));

-----------------------------------------------------------------
               </example>
           </paragraph>
       </content>
   </chapter>
   <chapter>
<subject>React Types Components</subject>
       <content>
           <subtitle>React way of checking the react types elements/nodes</subtitle>
           <paragraph>
               <info>React has its own way of clasifing what react element object is being return 
               some of them are more tight type check other more general , they usefull for typescript checks specifing
               what type of node should be returned</info>
               <example>
------------------ReactElement and JSX.Element -------------------------

1. A ReactElement and JSX.Element 

are objects with a type and props which are the result of createElement() method,
whose props and type have type any, so they are more or less the same.

has to be defined:
  object
  number,
  string 
  (any value but not falsy)

------------------React.Node -------------------------

2. A ReactNode is 

    ReactElement,
    ReactFragment,
    string,
    number 
    or an array of ReactNodes,
    null,
    undefined,
    boolean
    children
    (takes falsy values is usefull when check if component exists)

  is used as return type for render() in class components. 
  It also is the default type for children attribute with PropsWithChildren.

  basically is:

        type ReactNode = {} | null | undefined;
    </example>
    </paragraph>
           <subtitle>Ways of render react JSX</subtitle>
           <paragraph>
               <info>React Node/Element could be either function or class, bellow are the ways of rendering JSX in 
               render() or retruning JSX in functional Component</info>
               <example>
------------------Functional Component to add------------------------

 GOLDEN RULE =>

  -------- functional component it will be always function------------ 



       const JsxElement = ({ name }) => (&lt;div>{`${name} has been added`}&lt;/div>)
      

and JSX execution is always: 

  &lt;JsxElement name={'Greg'} />


----- Examples: primitive values as number or string------

  const value = 'value'
  const nb = 2


------ Examples: react components ------


  // assign to Constant
  const MyElement = JsxElement
  // assign to object
  const Obj = { setter: &lt;JsxElement name={'obj name'} /> }
  // extended to the react Component
  const MyElementExtended = (props) => &lt;JsxElement {...props} />


  render(){
    &lt;>
      {/* primitive values */}
      {nb}
      {value}
      {/* React elements */}
      &lt;MyElement name={'Greg'} />
      {Obj.setter}
      &lt;MyElementExtended name={'Extended'} />
    &lt;/>
  }


  ------------------------------------------------------------------
               </example>
           </paragraph>
       </content>
   </chapter>
  <chapter>
      <subject>dynamic import</subject>
      <content>
         <subtitle>dynamic import as hook on click</subtitle>
         <paragraph>
             <info>
               dynamic import allows you to import component on dymand as 
               the button click example below:
             </info>
             <example>
import React, { useState } from 'react';

const Location = () => {
  const [DynamicComponentLoaded, setDynamicComponent]
    = useState&lt;null | (() => JSX.Element)>(null)

  const loadComponent = async () => {
    const module = await import('../components/functional/DynamicLocationPage')
    //this method only works for default exports
    setDynamicComponent(() => module.default)

  }

  return (
    &lt;div>
      {!!DynamicComponentLoaded ?
        &lt;DynamicComponentLoaded />
        : &lt;button onClick={loadComponent}>Load Location Component dynamically&lt;/button>}
    &lt;/div>
  );

}

export default Location;
             </example>
         </paragraph>
          <subtitle>dynamic import as Class on click</subtitle>
         <paragraph>
             <info>
               dynamic import allows you to import component on dymand as 
               the button click example below:
             </info>
             <example>
import React from 'react';

class Location extends React.Component {

  // :(() => JSX.Element) this react construction type needed for react jsx component execution
  //as &lt;DynamicComponentLoaded /> in TS
  state: { DynamicComponentLoaded: null | (() => JSX.Element) } = {
    DynamicComponentLoaded: null
  }


  loadComponent = () => {
    import('../components/functional/DynamicLocationPage').then((module) => {
      //this method only works for default exports
      this.setState({ DynamicComponentLoaded: module.default })
    })
  }

  render() {
    const { DynamicComponentLoaded } = this.state;
    return (
      &lt;div>
        {!!DynamicComponentLoaded ?
          &lt;DynamicComponentLoaded />
          : &lt;button onClick={this.loadComponent}>Load Location Component dynamically&lt;/button>}
      &lt;/div>
    );
  }
}

export default Location;
             </example>
         </paragraph>
      </content>
  </chapter>
  <chapter>
      <subject>JSX syntax</subject>
      <content>
          <subtitle>JSX single line</subtitle>
          <paragraph>
              <info>JSX could be set on single line and it needs {variable,js expresion} to interpolate that into syntax</info>
              <example>
---------------- jsx single Line--------------

  const info = 'info';
  const fn = value=> `myValue ${value}`

  const jsxExample = &lt;div>{info} {fn('set')} {5+5} &lt;/div>

  ReactDOM.render(
    jsxExample,
    document.getElementById('root')
  );
------------------------------------------------
              </example>
          </paragraph>
          <subtitle>JSX multiple line</subtitle>
          <paragraph>
              <info>for clarity JSX could and should be set on multiple lines with () and it accepts {variable,js expresion} to interpolate that into syntax</info>
              <example>
---------------- jsx multiple Line needs () parenthesis--------------

const info = 'info';
const fn = value=> `myValue ${value}`

const jsxExample = (
                    &lt;div>
                      {info}
                      {fn('set')} 
                      {5+5} 
                    &lt;/div>
                    );

ReactDOM.render(
  jsxExample,
  document.getElementById('root')
);
------------------------------------------------
              </example>
          </paragraph>
          <subtitle>JSX nesting</subtitle>
          <paragraph>
              <info>U could nest your jsx and render them into one jsx</info>
              <example>
---------------- jsx multiple Line--------------

const nestAndRenderArray = [1,2,3,4];
//create jsx outside
const outside = nestAndRenderArray.map( arrEl => &lt;p key={arrEl+3} > myElements: {arrEl} &lt;/p>);

const jsxExample = (
            &lt;div>
                &lt;div>
                    {&lt;p>{5+5}&lt;/p>}
                 &lt;/div>
                      {   nestAndRenderArray.map( arrEl =>
                            &lt;p key={arrEl} > myElements: {arrEl} &lt;/p>)
                      }
                &lt;div>
                    {outside}
                &lt;/div>
            &lt;/div>
        );

ReactDOM.render(
  jsxExample,
  document.getElementById('root')
);
------------------------------------------------



              </example>
          </paragraph>
      </content>
  </chapter>
 </chapters>