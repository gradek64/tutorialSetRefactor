<?xml version="1.0" encoding="UTF-8" ?>
<chapters>
   <chapter>
      <subject>Run jenkins from the docker Container</subject>
      <content>
         /
         <paragraph>
            <info
        >jenkins natively runs on java , therefore the native istalation needs specific version and 
               other addons , therefore the best way of running is via docker. Docker will take care of all
               dependencies and run if for you and expose port that jenkins pipelines can be viewed.</info>
            <example
        >-------  run/dowload jenkins docker image via command below: ------------------

1// visit its github page 

https://github.com/jenkinsci/docker/blob/master/README.md

2. run the command line in jenkins_tuts/docker_jenkins_volume


docker run -p 9000:8080 -p 50000:50000 -v $PWD/shared:/var/jenkins_home  jenkins/jenkins:lts-jdk11



-p 9000:8080 =&gt; the port 9000 is the port exposed to your browser.

-p 50000:50000 =&gt; the port 5000 is the port exposed for the agend (if setup)

-v $PWD/shared:/var/jenkins_home =&gt; is the volume/bindMounts, the folder that is shared from your machine with a docker container.

jenkins/jenkins:lts-jdk11 =&gt; the image that are we going to run that has java11 in it.

-------------------------------</example>
         </paragraph>
      </content>
   </chapter>
   <chapter>
      <subject>jenkins freestyle project</subject>
      <content>
         <subtitle>executing npm script in pipeline</subtitle>
         <paragraph>
            <info
        >freestyle project is a single jenkins job that will run in jenkins (if you need more than one job to run you should use
          pipelines)

        This method require istalation of additional jenkins plugins depend on what is going to be run, conditions below:

        1. The ideas is to run comand line in jenkins, therefore you need to provide all
        permsions, global variables, keys etc to be able the build

        2. To run node you need have it installed as plugin in jenkins:</info>
            <example
        >/******* run jenkins image with params to run npm script *************/


---- 1. cd to your project directory that has test cd argos/argos-repo -----

Note: when you creating a job in jenkins 'freestyle project' then the name of the project it will 
become a folder when jenkins is located for the job directory as below

=&gt; project name: test 
=&gt; jenkins directory: var/jenkins_home/workspace/test

this directory needs to be passed to the shared volume: -v $PWD/:/var/jenkins_home/workspace/test




docker run -p 9000:8080 -p 50000:50000 -e GITHUB_PACKAGES_AUTH_TOKEN=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 -v $PWD/:/var/jenkins_home/workspace/test  jenkins/jenkins:lts-jdk11



-p 9000:8080  =&gt; port exposed for browser
-p 50000:50000 =&gt; port exposed for agent 
-e GITHUB_PACKAGES_AUTH_TOKEN=xxxx =&gt; global enviroment GITHUB_PACKAGES_AUTH_TOKEN needed in .nmrc
-v $PWD/:/var/jenkins_home/workspace/test =&gt; expose/share project directory to /var/jenkins_home in container
 
 --- to see the contaienr content run ---
 =&gt; docker ps -a (show running containers)
 =&gt; docker exec -it docker_container_id bash

--- 2. open jenkins on loclahost:9000 ----

--- 3. install plugin for node and configure it ----

Dashboard =&gt; manage jenkins =&gt; manage plugins =&gt; available =&gt; nodejs plugin

then configuration as follows:

Dashboard =&gt; manage jenkins =&gt; manage plugins =&gt; global tool configuration =&gt; 
=&gt; pick the node version to install , what global packages shold be installed as yarn if needed 
etc...

----- 4. -----
=&gt; start freestyle project and name it : test
------4a------------
=&gt; in Build Enviroment section select 'Provide node and npm bin/folder to path' and when
you expand the section you should see your node16 name you provide in install plugin section
--------4b-----------
=&gt; set your script in jobs as shell script ----
=&gt; the project repo is shared so it does not need yarn (npm install) it shoud exucute yarn script


------------------------|
echo 'where are you ?'  |
pwd                     |
yarn test:unit          |
------------------------|

/*********************************************/</example>
         </paragraph>
         <subtitle
      >Volumes - way to keep containers statefull not stateless</subtitle>
         <paragraph>
            <info
        >volumes allow to keep data persistent and they are seperate from the contaiers, when the container is removed 
               but the volume will stay, you can start a new container and it will use data from the volume. Volumes are also means to 
               inject configuration and dependencies into container.</info>
            <example
        >/***************** docker build ****************************/

  /

/*********************************************/</example>
         </paragraph>
      </content>
   </chapter>
   <chapter>
      <subject>jenkins pipelines</subject>
      <content>
         <subtitle>jenkins agent/agents</subtitle>
         <paragraph>
            <info>What is jenkins agent ?

            It is a host =&gt; operating system that creates all necessary environment to run jenkins job
            
             and it could be based on any popular desktop
            operating system as linux, widows, mac or could be defined as docker container or set remotely on the server. As long as has all needed
            executables then it will run your pipelines. It is also possible to define multiple agents. 

            jenkins has build-in agent set on linux , but it should be only used for test purposed, you should always define your agent machine as 
            jenkins will remind you off in the warning section:

            'Building on the built-in node can be a security issue. You should set up distributed builds. See the documentation.'</info>
            <example>/********/

=&gt; agent can be specified as "any" meaning the jenkins will pick any node/operating system available to execute this pipeline


 ======= pipeline declarative syntax ==============

    pipeline {
        agent any
        stages {
            stage('Hello'){
                echo 'this pipeline using any available agent'
            }
        }
    }

 =======

=&gt;  it could be also skipped in below syntax 

node {
    stage('Hello') {
        echo 'this pipeline using any available agent'
    },
}

 =======

/*********************************************/</example>
         </paragraph>
         <subtitle>executing npm script in pipeline</subtitle>
         <paragraph>
            <info
        >Just like in freestyle jenkins jobs , the npm script can be executed in pipeline as below:
          
          1. Run your jenkins instance from the docker container (like in freestyle job) but there is issue with accessing 
          volume from the pipeline so you need add user flag to the docker command

          2. Define node plugin (exactly the same as freestyle job)

          3. Set you your steps within pipeline

          Detailed setup below:</info>
            <example
        >/******* run jenkins image with params to run npm script *************/


---- 1. cd to your project directory that has test cd argos/argos-repo -----

Note: when you creating a job in jenkins 'freestyle project' then the name of the project it will 
become a folder when jenkins is located for the job directory as below

=&gt; project name: test 
=&gt; jenkins directory: var/jenkins_home/workspace/test

this directory needs to be passed to the shared volume: -v $PWD/:/var/jenkins_home/workspace/test



docker run -u 0 -p 9000:8080 -p 50000:50000 -e GITHUB_PACKAGES_AUTH_TOKEN=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 -v $PWD/:/var/jenkins_home/workspace/test  jenkins/jenkins:lts-jdk11



-u 0 =&gt; set user as root to avoid permission issues once accessing volume from the pipeline (should be done only for testing purposed)
-p 9000:8080  =&gt; port exposed for browser
-p 50000:50000 =&gt; port exposed for agent 
-e GITHUB_PACKAGES_AUTH_TOKEN=xxxx =&gt; global environment GITHUB_PACKAGES_AUTH_TOKEN needed in .nmrc
-v $PWD/:/var/jenkins_home/workspace/test =&gt; expose/share project directory to /var/jenkins_home in container
 
 --- to see the container content run ---
 =&gt; docker ps -a (show running containers)
 =&gt; docker exec -it docker_container_id bash

--- 2. open jenkins on localhost:9000 ----

--- 3. install plugin for node and configure it ----

Dashboard =&gt; manage jenkins =&gt; manage plugins =&gt; available =&gt; nodejs plugin

then configuration as follows:

Dashboard =&gt; manage jenkins =&gt; manage plugins =&gt; global tool configuration =&gt; 
=&gt; pick the node version to install and name it with the version as 16.13.2' , what global packages should be installed as yarn if needed 
the version then can be reference in groovy pipeline script in tools
etc...

--- 4. -----
=&gt; start your pipeline calling  : test 
=&gt; this will make it default workspace set to jenkins directory: var/jenkins_home/workspace/test

--- 5. ----------
=&gt; configure pipeline as below

pipeline {
    agent any
    tools {
        nodejs '16.13.2'
    }
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('run unit test') {
            steps {
                sh '''
                    echo where are you ?
                    pwd 
                    yarn test:unit:stub
                '''
            }
        }
    }
}

/*********************************************/</example>
         </paragraph>
         <subtitle>running docker agent in pipeline</subtitle>
         <paragraph>
            <info
        >1.In  jenkins you can set different agent and one of them can be docker. In can be set 
          as global agent for entire pipeline or for individual stages.
          
          stage('test node version') {
                agent {
                    docker { image 'node:16.13.1-alpine' }
                }
                steps {
                    sh '''
                        docker --version
                        node --version
                    '''
                }
            }
          
         To run your pipeline locally you need install docker directly in your container by extending your
         jenkins base image and changing user to the root to avoid permissions issues.

          --- docker file image to extend base jenkins image---

        FROM jenkins/jenkins:lts-jdk11
        USER root
        RUN apt-get update
        RUN curl -sSL https://get.docker.com/ | sh
        

        Installation details below:</info>
            <example
        >/***************** Steps to install/run docker on jenkins locally ****************************/

1. docker has to be manually install first on docker container , luckily we can extend our jenkins
base image in docker file and build

--- docker file image to extend base jenkins image---

        FROM jenkins/jenkins:lts-jdk11
        USER root
        RUN apt-get update
        RUN curl -sSL https://get.docker.com/ | sh

2. build =&gt; go to directory where your dockerfile is saved

    docker build -t jenkins-with-docker .

3. run your newly created image with extend docker

    docker run -p 9000:8080 --group-add $(stat -c '%g' /var/run/docker.sock) -v /var/run/docker.sock:/var/run/docker.sock jenkins-with-docker

--group-add =&gt; add group permsions to the docker socket
-p =&gt; redirect jenkins port to 9000
-v set volume to pass docker socket to the container 

4. Now you should get a jenkins instance running with the password showed in terminal

5. Install 2 docker plugins Docker and Docker pipeline

=&gt; Dashboard =&gt; manage jenkins
=&gt; available =&gt; search 'Docker'
=&gt; select Docker
=&gt; select docker pipelines

=&gt; save without restart

6. configure docker plugin

=&gt; Dashboard =&gt; global tool configuration
=&gt; add docker section
=&gt; give a name as 'docker'
=&gt; initial root leave empty to get docker from the $PATH
=&gt; save

7. set your pipeline with a global docker agent that will work for all stages


pipeline {
    agent {
        docker { image 'node:16.13.1-alpine' }
    }
    stages {
        stage('test node version') {
            steps {
            sh '''
                docker --version
                sh 'node --version'
            '''
            }
        }
        stage('test npm version') {
            steps {
            sh '''
                docker --version
                sh 'npm --version'
            '''
            }
        }
    }
}

/*********************************************/</example>
         </paragraph>
      </content>
   </chapter>
   <chapter>
   <subject>docker commands in jenkins pipeline</subject>
      <content>
    <subtitle
      >1. Setting up the docker provider from docker deamon host</subtitle>
    <paragraph>
    <info
        >Docker works that is uses its host kernel, so it can be used in the container.
    So as long as the host machine have Docker desktop installed you should be able to use it 
    via socket in the network attached to the container. 
    Details below:
    </info>
     <example>
     ---------
     1. Start your local docker desktop 

     2. Create a docker network that is going to be attach to the container 

----------------- copy and paste ----------

     docker network create jenkins

-----------------
     3.In order to give Jenkins access to the Docker daemon running on the host machine, 
     we will use a socat container to publish the unix socket /var/run/docker.sock (to the Docker daemon) as port 2375.

----------------- copy and paste ----------

     docker container run --name jenkins-docker \
        --detach --restart unless-stopped \
        --network jenkins --network-alias docker \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        --publish 2375:2375 \
        alpine/socat \
        tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock

-----------------

    --detach => container run in the background
     --network jenkins  => container attached to the jenkins network
     --network-alias docker => network accessible via docker instead of localhost
     --volume /var/run/docker.sock:/var/run/docker.sock => docker is passed via unix socket /var/run/docker.sock
     --publish 2375:2375 => docker will be publish on web  via tcp://docker:2375
     alpine/socat => base docker image from docker hub

    IMPORTANT: After running this command, 
    the socat container will be listening on port 2375 
    and since we gave it the network alias of docker 
    then we will be able to reach it from Jenkins on tcp://docker:2375.
    Now is available on localhost as http://localhost:2375
    Details below:

    4. test you connection

    4a. list container that are running: 

        docker ps 

    => you should get the PORT output: 0.0.0.0:2375->2375/tcp, :::2375->2375/tcp

    4b.  check your docker api version by:

       docker version 

    => you should get API as : API version:      1.41 (minimum version 1.12) or similar

    4c.  now test connection

    ----------------- copy and paste ----------

    http://localhost:2375/v1.41/info 

    // or 

    http://0.0.0.0:2375/v1.41/info

    ----------------- 


     </example>
    </paragraph>
    <subtitle>2. create docker image that extends jenkins@v11 image</subtitle>
    <paragraph>
    <info
        >Since we have network with docker attach, we also need to have docker CLI commands
    installed on our jenkins container, for that we need to create a docker image and build our 
    container from it. Details below:
    in</info>
     <example>
     1. Create a docker image  'Dockerfile' with below content

  ----------------- copy and paste ----------

    FROM jenkins/jenkins:2.375.1-jdk11
    USER root
    RUN apt-get update &amp;&amp; apt-get install -y lsb-release
    RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \
    https://download.docker.com/linux/debian/gpg
    RUN echo "deb [arch=$(dpkg --print-architecture) \
    signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
    https://download.docker.com/linux/debian \
    $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
    RUN apt-get update  &amp;&amp; apt-get install -y docker-ce-cli
    USER jenkins

  ----------------- 

    FROM jenkins/jenkins:2.375.1-jdk11 => base image to extend
    USER root => change user to root for privileges
    ....
    RUN apt-get update &amp;&amp; apt-get install -y docker-ce-cli => install docker CLI
    USER jenkins => change user to Jenkins user

 2. from the directory of Dockerfile build a docker image based on above Dockerfile with meaningful name 
 and tag as jenkins-with-docker-cli:v1

 ----------------- copy and paste ----------

    docker build -t jenkins-with-docker-cli:v1 .

 -----------------

     </example>
    </paragraph>
    <subtitle>3. Run jenkins container from previous step</subtitle>
    <paragraph>
    <info
        >Now what is left is to run our jenkins container with docker CLI installed and open up
    jenkins in the web. Details below:</info>
     <example>

     1. create a named volume that will store /var/jenkins_home 

     ----------------- copy and paste ----------

     docker network create jenkins-data

    -----------------
     
     2. run docker container as below 

     ----------------- copy and paste ----------

    docker run --name jenkins-with-docker-cli \
    --restart=on-failure \
    --network jenkins \
    --env DOCKER_HOST=tcp://docker:2375 \
    --env DOCKER_TLS_VERIFY="" \
    --volume jenkins-data:/var/jenkins_home \
    --publish 9000:8080 --publish 50000:50000 jenkins-with-docker-cli:v1

    -----------------

    --network jenkins => attach network jenkins to the container
    --env DOCKER_HOST=tcp://docker:2375 => pass global env to the container
    --volume jenkins-data3:/var/jenkins_home => store jenkins root folder in volume jenkins-data
    --publish 9000:8080 => publish jenkins on localhost:9000 from default 8080
    --publish 50000:50000 => publish jenkins agent on default 50000
    jenkins-with-docker-cli:v1 => image with docker cli installed

    3. open up jenkins on 

    ----------------- copy and paste ----------

    localhost:9000 
    
    ----------------- 
    and go through initial setup, the initial password will be logged in terminal

     </example>
    </paragraph>
    <subtitle>4. Setup Docker in web jenkins UI </subtitle>
    <paragraph>
    <info>
    Now that you have your jenkins running you need add Docker plugin and configure with
    network host exposed on : tcp://docker:2375 
    Details below:
    </info>
     <example>
     <subheader>subheader</subheader>
     <content>container</content>
     <subheader>subheader</subheader>
     <content>container</content>
     <subheader>subheader</subheader>
     <content>container</content>
     1. Now you need to install Docker plugin for jenkins 

     => Dashboard => Manage Jenkins => Plugin Manager => Available plugins

     search for: Docker 
     install and restart

     2. set network connection with Docker plugin 

     => Dashboard => Manage Jenkins => Configure Clouds

     pick 'Docker' from drop down:

     Docker Host URI: tcp://docker:2375 
     => test connection button you should get something similar:

     'Version = 20.10.7, API Version = 1.41'

     => click save

     2. create your test pipeline as below:

     ----------------- copy and paste ----------

    pipeline {
        agent any

        stages {
            stage('Test Docker') {
                steps {
                    sh '''
                        docker --version 
                        docker ps
                    '''
                }
            }
        }
    } 
    
    ----------------- 
     agent any => jenkins will take any available agent (engine to run)
     
     => run your pipeline => click BUILD NOW

     </example>
    </paragraph>
   </content>
   </chapter>
</chapters>
