<?xml version="1.0" encoding="UTF-8"?>
<chapters>
    <chapter>
        <subject>Basics of JEST Framework</subject>
        <content>
          <subtitle>naming and Folder convention</subtitle>
            <paragraph>
                <info>U should create a sepearte folder for your test that follows the same structure as your src directory</info>
                <example>
================ test folder structure  __tests__ ================

      Intresting fact if you create folder named : src/__tests__ jest will automatically detect that and uses this foler for running test on files.js inside , beside their names , no need to include filename.test.js it could be skipped

================ ================ ================      
                </example>
            </paragraph>
            <subtitle>instaling JEST</subtitle>
            <paragraph>
                <info>jest is a testing framework ceated by facebook and covers most of the cases for testing react applications</info>
                <example>
================ install JEST by ================

      npm i jest@20.0.4 (this version works with webpack 3 and babel6) latest version needs update on webpack and babel

================ to run ================

npm test (it will look for filenames with test in a name);


================ run only one test as  ================

npm test -- -t 'react Fragement' 

will run this test('react Fragement', () => {}) so the discription of the test matters


================ to run with watch mode ================

npm test --watch 

================ to run a simple test ================ 

const add = (a,b)=> a + b;

test('should add two numbers'.; ()=> {
const result = add(3,4)
//asserstion 
expect(result).toBe(7);
});
================ ================ ================      
                </example>
            </paragraph>
            <subtitle>testing Objects and arrays</subtitle>
            <paragraph>
                <info>in javascript {}==={} or []===[] are always false , the key is to test what is inside and array or object properties as below</info>
                <example>
================ 2 objects ================ 

const obj1 = {name:'Greg'}
const obj2 = {name:'Greg'}

obj1===obj2 //false
JSON.stringify(obj1)===JSON.stringify(obj2) //true we comparing to strings

//jest 
describe('Objects are the same', () => {
test('have all the same properties', () => {
  expect(obj1).toEqual(obj2);
});
});


================ ================ ================
                </example>
            </paragraph>
        </content>
    </chapter>
    <chapter>
       <subject>Snapshot testing</subject>
        <content>
            <subtitle>react-test-renderer from JEST no event handlers support</subtitle>
<paragraph>
<info>There is a small package a 
  npm package called 'react-test-renderer' for making your component snapshots. No need for Enzyme. BUT
  in only creates static snapshot it doesnt allow to test clicks, mouse events etc.</info>
<example>
                  
================ instaling react-test-renderer ================

npm i react-test-renderer@16.0.0 (U need this version if you work with React 16.* )

================ example snapshot with JEST react-test-renderer no event handlers   ================

import React from 'react';
import Link from '../Link.react';
import renderer from 'react-test-renderer';

it('renders correctly', () => {
  const tree = renderer
    .create(&lt;Link page="http://www.facebook.com">Facebook&lt;/Link&gt;)
    .toJSON();
  expect(tree).toMatchSnapshot();
});

================ ================ ================

                </example>
            </paragraph>
      <subtitle>ENZYME Configuration</subtitle>
      <paragraph>
          <info>Before U need 'Enzyme' Airbnb product that is created to enhance testing for React, it uses addtional selectors and enables Snapshot testing, it needs special adapters to work with JEST
          ENZYME allows you to add event handlers of any types to your shallow wrappers.
          </info>
          <example>
            
================ instaling enzyme ================

npm i --save-dev 
enzyme@3.0.0 
enzyme-adapter-react-16@1.7.1  (at least 1.7.* needed for react 16.8.4 with hooks)
enzyme-to-json@3.0.1 (package that allows you to render clean snapshot containing just Component JSX)
raf@3.3.2  (U need natitve request animation frame that is default in browser since IE 10 but we need that in testing enviroment )

================ configuration needed for Enzyme 3 ================

create a file for JEST configuration in a root of your project;

================ ================ ================ ================

----------------------root/jest.configuration.json--------------

{
  "setupFiles":[
    "raf/polyfill",
    "&lt;rootDir&gt;/enzyme.configuration.js"
  ]
}


//update to the file to have clean snapshot set without importing enzyme-to-json in every file
//so use that version 
{
    "setupFiles": [
        "raf/polyfill",
        "&lt;rootDir&gt;/enzyme.configuration.js"
    ],
    "snapshotSerializers": [
        "enzyme-to-json/serializer"
    ]
}

================ ================ ================ ================

create a file for ENZYME configuration in a root directory;

================ ================ ================ ================

----------------------root/enzyme.configuration.js--------------

import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

Enzyme.configure({ adapter: new Adapter() });


================ ================ ================ ================

update your package.json with a path for jest configuration

================ ================ ================ ================

----------------------root/package.json--------------

"scripts": {
    "test": "jest --config=jest.configuration.json"
  },


---------------------------------------------------------------



import React from 'react';
import { shallow } from 'enzyme';
import MyComponent from './MyComponent';

describe('MyComponent', () => {
  it('should render correctly in "debug" mode', () => {
    const component = shallow(&lt;MyComponent debug /&gt;);
  
    expect(component).toMatchSnapshot();
  });
});

================ ================ ================

          </example>
      </paragraph>
      <subtitle>Event simulators</subtitle>
      <paragraph>
          <info>Enzyme allows you to simulate events , could be any event as onLoad, click etc.. U need to find DOM element first and attach simulate as U would event as addEbentListener</info>
          <example>
================ test click event and the outcome ================



//u need to mock your event handler method ( more about mocking in next section)
const eventHandlerCalled = jest.fn(); 

const value = 'myValue';
const wrapper = shallow(&lt;SearchBox
  label="label"
  // e below is not a real event so if you need to use e.target.value you need to mock it
  eventHandler={e => (eventHandlerCalled(value))}
/&gt;);

// here we simulate onInput that needs to have event.target.value in handler method so we do;
wrapper.find('input').at(0).simulate('input', { target: { value } });

// fucntion is called after click;
expect(eventHandlerCalled).toHaveBeenCalledWith(value);




================  ================  ================  ================ 
          </example>
      </paragraph>
      <subtitle>shallow testing</subtitle>
      <paragraph>
          <info>shallow testing allows U to render a component on one level , that means any tested components wont be rendered to the snapshot. It donsnt need any addtional library beside deafault jest and enzyme configuration.</info>
          <example>
================= example of shalow Enzyme method to Snapshot =================

import React from 'react';
import { shallow } from 'enzyme';

// component for snapshot test;
import SimpleButton from '../../../functional/Simplebutton';

test('renders correctly', () => {
  const wrapper = shallow(&lt;SimpleButton label="label" action={() => {}} /&gt;);
  expect(wrapper).toMatchSnapshot();
});

================ ================ ================ ================ 
          </example>
      </paragraph>
      <subtitle>Full dom Rendering enzyme mount();</subtitle>
      <paragraph>
          <info>U might need to render nested component for full DOM rendering, for that you also need to install a separate libraray , React reccomends jsdom</info>
          <example>
===== To help you make up your mind, here is a list of APIs that need jsdom =======



-Any browser globals like window and document
-ReactDOM.render()
-TestUtils.renderIntoDocument() (a shortcut for the above)
-mount() in Enzyme




========== example of full rending is the same as shalow but full needs mount() =========

//no addtional configuration is needed Enzyme behind the scene is using jsdom , not external install nedeed;



import React from 'react';
import { shallow, mount } from 'enzyme';

/*
  *@this next line is defined in a root/jest.configuration.js
  *@so no need to import library
*/
// import toJson from 'enzyme-to-json';

// component for snapshot test;
import ToggleButton from '../../../functional/Togglebutton';

test('renders correctly', () => {
  const wrapper = mount(&lt;ToggleButton
    action={() => {}}
    label="sort"
    toggleLabels={['ASC', 'DESC']}
    values={['sortASC', 'sortDESC']}
  /&gt;);
  expect(wrapper).toMatchSnapshot();
});



============ ============ ============ ============
          </example>
      </paragraph>
      <subtitle>Full render with Jsdom</subtitle>
      <paragraph>
          <info>U can use jsdom framework by creating browser enviroment, if U dont want to use Enzyme mount() method</info>
          <example>
            
============ pure jsdom render no enzyme (not recommended) ============

import React from 'react';
import dom from 'jsdom';

test('User profile', () => {
  let component, dom;

  before((done) => {
    let person = { FirstName:'Richard', LastName:'Kotze' };
    component = React.render(
      &lt;ProfileBox hint={person} />,
      document.body,
      () => {
        setTimeout(done);
      }
    );
  });

  after((done) => {
    React.unmountComponentAtNode(document.body);
    setTimeout(done);
  });

  expect('should contain name', () => {
    dom = React.findDOMNode(component);
    dom.textContent.should.containEql('Richard Kotze');
  });

});

============ ============ ============ ============

          </example>
      </paragraph>
        </content>
    </chapter>
</chapters>