<?xml version="1.0" encoding="UTF-8"?>
<chapters>
    <chapter>
        <subject>Basics of JEST Framework</subject>
        <content>
          <subtitle>naming and Folder convention</subtitle>
            <paragraph>
                <info>U should create a sepearte folder for your test that follows the same structure as your src directory</info>
                <example>
================ test folder structure  __tests__ ================

      Intresting fact if you create folder named : src/__tests__ jest will automatically detect that and uses this foler for running test on files.js inside , beside their names , no need to include filename.test.js it coudl be skipped

================ ================ ================      
                </example>
            </paragraph>
            <subtitle>instaling JEST</subtitle>
            <paragraph>
                <info>jest is a testing framework ceated by facebook and covers most of the cases for testing react applications</info>
                <example>
================ install JEST by ================

      npm i jest@20.0.4 (this version works with webpack 3 and babel6) latest version needs update on webpack and babel

================ to run ================

npm test (it will look for filenames with test in a name);

================ to run with watch mode ================

npm test --watch 


================ to run a simple test ================ 

const add = (a,b)=> a + b;

test('should add two numbers'.; ()=> {
const result = add(3,4)
//asserstion 
expect(result).toBe(7);
});
================ ================ ================      
                </example>
            </paragraph>
            <subtitle>testing Objects and arrays</subtitle>
            <paragraph>
                <info>in javascript {}==={} or []===[] are always false , the key is to test what is inside and array or object properties as below</info>
                <example>
================ 2 objects ================ 

const obj1 = {name:'Greg'}
const obj2 = {name:'Greg'}

obj1===obj2 //false
JSON.stringify(obj1)===JSON.stringify(obj2) //true we comparing to strings

//jest 
describe('Objects are the same', () => {
test('have all the same properties', () => {
  expect(obj1).toEqual(obj2);
});
});


================ ================ ================
                </example>
            </paragraph>
        </content>
    </chapter>
    <chapter>
       <subject>Snapshot testing</subject>
        <content>
            <subtitle>Snapshot testing using only JEST react-test-renderer no event handlers support</subtitle>
            <paragraph>
                <info>There is a small package a 
                  npm package called 'react-test-renderer' for making your component snapshots. No need for Enzyme. BUT
                  in only creates static snapshot it doesnt allow to test clicks, mouse events etc.</info>
                <example>
                  
================ instaling react-test-renderer ================

npm i react-test-renderer@16.0.0 (U need this version if you work with React 16.* )

================ example snapshot with JEST react-test-renderer no event handlers   ================

import React from 'react';
import Link from '../Link.react';
import renderer from 'react-test-renderer';

it('renders correctly', () => {
  const tree = renderer
    .create(<Link page="http://www.facebook.com">Facebook</Link>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});

================ ================ ================

                </example>
            </paragraph>
      <subtitle>Snapshot testing using JEST and ENZYME with event handlers support</subtitle>
      <paragraph>
          <info>Before U need 'Enzyme' Airbnb product that is created to enhance testing for React, it uses addtional selectors and enables Snapshot testing, it needs special adapters to work with JEST</info>
          <example>
            
================ instaling enzyme ================

npm i --save-dev 
enzyme@3.0.0 
enzyme-adapter-react-16@1.0.0 
enzyme-to-json@3.0.1 (package that allows you to render clean snapshot containing just Component JSX)
raf@3.3.2  (U need natitve request animation frame that is default in browser since IE 10 but we need that in testing enviroment )

================ configuration needed for Enzyme 3 ================

create a file for JEST configuration in a root of your project;

================ ================ ================ ================

----------------------root/jest.configuration.json--------------

{
  "setupFiles":[
    "raf/polyfill",
    "&lt;rootDir>/enzyme.configuration.js"
  ]
}


//update to the file to have clean snapshot set without importing enzyme-to-json in every file
//so use that version 
{
    "setupFiles": [
        "raf/polyfill",
        "&lt;rootDir>/enzyme.configuration.js"
    ],
    "snapshotSerializers": [
        "enzyme-to-json/serializer"
    ]
}

================ ================ ================ ================

create a file for ENZYME configuration in a root directory;

================ ================ ================ ================

----------------------root/enzyme.configuration.js--------------

import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

Enzyme.configure({ adapter: new Adapter() });


================ ================ ================ ================

update your package.json with a path for jest configuration

================ ================ ================ ================

----------------------root/package.json--------------

"scripts": {
    "test": "jest --config=jest.configuration.json"
  },


---------------------------------------------------------------



              import React from 'react';
import { shallow } from 'enzyme';
import MyComponent from './MyComponent';

describe('MyComponent', () => {
  it('should render correctly in "debug" mode', () => {
    const component = shallow(&lt;MyComponent debug />);
  
    expect(component).toMatchSnapshot();
  });
});

================ ================ ================

          </example>
      </paragraph>
      <subtitle>geg</subtitle>
      <paragraph>
          <info>geg</info>
          <example>gege</example>
      </paragraph>
        </content>
    </chapter>
</chapters>