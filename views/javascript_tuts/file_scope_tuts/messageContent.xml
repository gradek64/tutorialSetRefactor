<?xml version="1.0" encoding="UTF-8"?>
 <chapters>
   <chapter>
       <subject>javascript works synchronouslly and top-level scope</subject>
       <content>
           <subtitle></subtitle>
           <paragraph>
               <info>synchronouslly: means the code is being executed from top to bottom.
                1) the code could be spread in diffrent files still is treated as one. As long it is being requeested synchronouslly. So you dont execute variavle that is not declared yet.
                2) it will throw error if you execute code depending all the code that is not executed yet in diffrent file;
                3) Dont relay on that technique cause you never know how long is goign to take to execute code that is in diffrent file.
                4) top-level scope is shared between files.
               </info>
               <example>
-------------------file1.js------------------

const set1 = 'set1';
console.log(set2) //error not declared yet 

-------------------file2.js------------------

const set1 = 'set2';
console.log(set1) //return set1
const set1 = 'set4';//error const already declared

----------------

               </example>
           </paragraph>
       </content>
   </chapter>
   <chapter>
       <subject>import export options</subject>
       <content>
           <subtitle>import an entire file;</subtitle>
           <paragraph>
               <info>you can import entire file to another file by:
                        
               </info>
               <example>
-------------no expot needed since entire file is taken
import './entireFile';

----------------
           </example>
           </paragraph>
           <subtitle>import as variable: Named Export</subtitle>
           <paragraph>
               <info>Named Export:
                you can import specific part of the files that are set as variables;
               </info>
               <example>
--------------------file1.js------------------------

import {add,multiply} from 'file2.js'

console.log(add(4,6));
console.log(multiply(4,6));

--------------------file2.js------------------------

export const add = (a,b) => a+b;

export let multiply = (a,b) => a*b;

------------- ------------- ------------- -------------
               </example>
           </paragraph>
            <subtitle>import as variable: Default Export</subtitle>
           <paragraph>
               <info>Default Export:
                you can import specific part of the files as set them to default , that way you dont need its name cause it is default 
                (can take any name in import );
               </info>
               <example>
--------------------file1.js------------------------
//in default export you can use any name you like 
//you can still mix default with named import as below;

import someName, {add} from 'file2.js'

//usage
console.log(someName(4,6));

--------------------file2.js------------------------
//you can still export by its name even if you use default already;
export const add = (a,b) => a+b;

//U can only have one default, but as many name Export as you wish;
export default multiply = (a,b) => a*b;

------------- ------------- ------------- -------------

               </example>
           </paragraph>
           <subtitle>import as variable: Default Export and Name Export</subtitle>
          <paragraph>
              <info>Default Export and Named Export:
               U can combince them together and export can be shorthanded as below:
              </info>
              <example>
--------------------file1.js------------------------
//in default export you can use any name you like 
//you can still mix default with named import as below;

import someName, {add} from 'file2.js'

//usage
console.log(someName(4,6));

--------------------file2.js------------------------
//you can still export by its name even if you use default already;
const add = (a,b) => a+b;

//U can only have one default, but as many name Export as you wish;
multiply = (a,b) => a*b;

//export all 
exportig {add, multiply as default};

------------- ------------- ------------- -------------

              </example>
          </paragraph>
           <subtitle>export all options</subtitle>
           <paragraph>
               <info>export all options</info>
               <example>
-------------------------------------------- 
export { name1, name2, …, nameN };
export { variable1 as name1, variable2 as name2, …, nameN };
export let name1, name2, …, nameN; // also var, const
export let name1 = …, name2 = …, …, nameN; // also var, const
export function FunctionName(){...}
export class ClassName {...}

export default expression;
export default function (…) { … } // also class, function*
export default function name1(…) { … } // also class, function*
export { name1 as default, … };

export * from …;
export { name1, name2, …, nameN } from …;
export { import1 as name1, import2 as name2, …, nameN } from …;
export { default } from …;
------------------------ ------------------------ ------------------------
               </example>
           </paragraph>
           <subtitle>import all options</subtitle>
           <paragraph>
               <info>import all options</info>
               <example>
-------------------------------------------- 

import defaultExport from "module-name";
import * as name from "module-name";
import { export } from "module-name";
import { export as alias } from "module-name";
import { export1 , export2 } from "module-name";
import { export1 , export2 as alias2 , [...] } from "module-name";
import defaultExport, { export [ , [...] ] } from "module-name";
import defaultExport, * as name from "module-name";
import "module-name";
var promise = import(module-name);

-------------------------------------------- 
               </example>
           </paragraph>
       </content>
   </chapter>
   <chapter>
       <subject>ES6 import and export in browser</subject>
       <content>
           <subtitle>ES6 import and export in browser files</subtitle>
           <paragraph>
               <info>Create 2 files (main.js, calculate.js) in a script folder as below that have import and export ES6 feature</info>
               <example>
--------------------scripts/main.js------------------------
'use strict';

import { sumTwo } from './calculate.js';

console.log("2 + 3 = ",sumTwo(2,3));


--------------------scripts/calculate.js------------------------

   function sumTwo(number1, number2){
       return number1 + number2;
   }

   export { sumTwo };


 --------------------index.html------------------------
 //for runing bundle.js in a browser;

 &lt;!DOCTYPE html>
 &lt;html lang="en">
 &lt;head>
  &lt;meta charset="UTF-8">
  &lt;title>browserify outcome&lt;/title>
 &lt;/head>
 &lt;body>
 &lt;script src="bundle.js">&lt;/script>
 &lt;/body>
 &lt;/html>

 ------------------ ------------------ ------------------

               </example>
           </paragraph>
           <subtitle>ES6 import and export in browser setup</subtitle>
           <paragraph>
               <info>
                 ES6 import and export in browser: 
                 Some of the features of ES6 dont work directly in browser just yet. Therefore we need use transpilers and compilers to make it work.Below Is is simple set up using:
                 1) babel-cli = transpiler to ES5 or node.js code in command line
                 2) babel-preset-env = preset needed for transpiling could be diffrent as react etc.
                 3) browserify = compiler of node.js code to use in browser, allows to use module.exports and require(modules) features in a browser
               </info>
               <example>
--------------- project set up ---------------

npm init -f //start package.json with defaults 

--------------- install babel-cli ---------------

//babel-cli to use in command line only for this example

npm i babel-cli --save or -S (to list in dependencies);

--------------------------------------------------

               </example>
           </paragraph>
           <subtitle>install babel preset</subtitle>
           <paragraph>
               <info>npm i babel-preset-env -S 
               it will traspile your ES6 code into node.js code if you use export/import module feature
               </info>
               <example>
--------------- install babel preset---------------

npm i babel-preset-env -S 

--------------------------------------------------
               </example>
           </paragraph>
           <subtitle>use presets in your package.json </subtitle>
           <paragraph>
               <info>U need to use preset previously installed. U could also make separte file called .babelrc as :

                --------------- .babelrc file as option---------------

                {
                  "presets": ["env"]
                }
                --------------------------------------------------

                but it is possible to set it in package.json so why not ;P

               </info>
               <example>
--------------- package.json part---------------

"babel": {
    "presets": [
      "env"
    ]
}
--------------------------------------------------
               </example>
           </paragraph>
           <subtitle>run your babel command for traspiling to ES5</subtitle>
           <paragraph>
               <info>In this exaple we going to run evertying in command line but in real project you would use gulp, grunt or node commands in package.json</info>
               <example>
--------------- run bubel for folder scripts ---------------

//using local install babel ./node_modules/.bin/babel

./node_modules/.bin/babel  ./scripts --experimental --source-maps-inline -d ./lib

--------------------------------------------------

               </example>
           </paragraph>
           <subtitle>run browserfy</subtitle>
           <paragraph>
               <info>run browserfy to the main file:
               now we have traspiled version of files so it is time to compile main.js and run in browser
             </info>
               <example> 
----run browserify only on main.js (since the other depend on it exporting) ----

//using local install browserify ./node_modules/.bin/browserify

./node_modules/.bin/browserify lib/main.js -o bundle.js

----------------run bundle.js in browser ----------------------

open index.html 

//full example folder: example_import_export_ES6

---------------- ---------------- ----------------
            </example>
           </paragraph>
       </content>
   </chapter>
 </chapters>