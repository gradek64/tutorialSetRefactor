<?xml version="1.0" encoding="UTF-8"?>
 <chapters>
  <chapter>
      <subject>types</subject>
      <content>
          <subtitle>tuple</subtitle>
          <paragraph>
                      <info>tuple allows you to specify ordered array, similar to destrucring array</info>
                      <example>

------- ordered array tuple ------------

const arr:[string,number] = ['3', 4]

//this array only takes max 2 arguments of a type string[0] and number[1]

                      </example>
                  </paragraph>
          <subtitle>types literals</subtitle>
          <paragraph>
              <info>types literals allows you to specify literal value as :

                type animal = 'dog' | 'cat'

              </info>
              <example>
-------- literal type allowance --------

const myAnimal = 'dog' //correct
const myAnimal2 = 'hamster' //ups you only have option for "dog" | "cat"

------------
              </example>
          </paragraph>
          <subtitle>types guards</subtitle>
          <paragraph>
              <info>Types guards allow to check for specific type either by  'property' in object method that loops
                through types or swich method.</info>
              <example>
-------- ('property' in object) type guards ---------

function moveAnimal(animal: Animal) {
  //1. One options is to use loop 'property' in object
  if ('flyingSpeed' in animal) {
    console.log('Animal is moving with', animal.flyingSpeed);
  }

  if ('runnigSpeed' in animal) {
    console.log('Animal is moving with', animal.runnigSpeed);
  }
}

-------- switch statement with  type guards ---------

//discriminated unions with switch statement (access some common property as comparison)

function moveAnimalDiscriminatedTypes(animal: Animal) {
  switch (animal.kind) {
    case 'bird':
      console.log('Animal is moving with', animal.flyingSpeed);
      break;
    case 'horse':
      console.log('Animal is moving with', animal.runnigSpeed);
      break;
    default:
      break;
  }
}
              </example>
          </paragraph>
      </content>
  </chapter>
  <chapter>
       <subject>Typescript generics</subject>
       <content>
           <subtitle>Build-in generics</subtitle>
           <paragraph>
               <info>Typescript uses generics for data assumptions, for example

                  const array = []

                  when U hover on array in IDE U will see : array:any[] or never[]
               </info>
               <example>
--------------------other exaples of build-in generics------------------------


1) promises always assume generics return type

const promise = new Promise((resolve, reject)=>{
  resolve('this is done')
})  

=> this will resolve to Promise:promise&lt;unknown> 
=> but we allowed and should tell typescript what to return as Promise:promise&lt;string>



 ------------------ ------------------ ------------------

               </example>
           </paragraph>
            <subtitle>custom multiple generics in function</subtitle>
           <paragraph>
               <info>U can assign generic type to every argument passed to the functtion. To create array from 2 arguments 
                you can return array of tuple as example below</info>
               <example>
//-------- multiple types generics

function createArray2MultipleTypes&lt;T, U>(n: T, u: U): [T, U] {
  return [n, u];
}

createArray2MultipleTypes&lt;number, number>(6, 4);
createArray2MultipleTypes&lt;string, number[]>('2', [4]);
createArray2MultipleTypes&lt;number, number[]>(2, [4]);


               </example>
           </paragraph>
           <subtitle>custom generics in function</subtitle>
           <paragraph>
               <info>
                 Generics are used for specific type on single run time. That means , the same function can 
                 be called one with a string and with a number on other time. It is important to make sure that typescript
                 knows what type is currently used, which is called type lock.
               </info>
               <example>
-----

function createArray&lt;T>(...arg: T[]) {
  return [...arg];
}

createArray('one', 'two', 'three'); //string[]
createArray(3, 1, 4); //number[]
createArray([3], [2], [4]); //number[][]

---NOTICE----
//bellow should create an error
createArray({ ss: 3 }, { ee: 3 }, [6]); 

---THEREFORE----
//sometimes you need to help typescript to lock values types you want to use as below

//with type locking
createArray&lt;{ [key: string]: number }>({ ss: 3 }, { ee: 3 }); //array{[key: string]: number }


               </example>
           </paragraph>
           <subtitle>types generic with constrains</subtitle>
           <paragraph>
               <info>Generics allows you to pass any type to the function, but sometime U want to be more specific 
                and tell typescirpt that you want to use only sting | numbers, basically contrains what type can be 
                used with your generic function. Generic constrains is the way to tell typescript that you only want to work with certain types.
               </info>
               <example>
--------------

type stringOrNumber = string | number;
function createArray1&lt;T extends stringOrNumber>(...arg: T[]) {
  return [...arg];
}

createArray1(2, 4, 5);
createArray1('2', '4', '5');
createArray1([2], [4], [5]); //not accepted
               </example>
           </paragraph>
           <subtitle>' key of' in type generics constrains</subtitle>
           <paragraph>
               <info>Typescript forces you to use typeof for type conditions, for object U can use value 'key of' object
                as the example below;
               </info>
               <example>
----------------check if key exists in object with generics  ----

const getObjectPropertyValue = &lt;T extends object, U extends keyof T>(obj:T,key:U):string => {
  return 'the value is'+obj[key]
}

getObjectPropertyValue({}, 'name') //error
getObjectPropertyValue({name:'Greg'}, 'name') //correct

               </example>
           </paragraph>
           
       </content>
   </chapter>
   <chapter>
       <subject>function overloads</subject>
       <content>
           <subtitle>function overloads syntax</subtitle>
           <paragraph>
               <info>Function overloads are great example of locking types. For complex function that returns compulation 
                You should use fuction overloads for simple compulation (not depending on types return) you should use types generics with functions</info>
               <example>
//proper usege of overload functions

function passStringOrNumber(n: string): string;
function passStringOrNumber(n: number): string;
function passStringOrNumber(n: string | number):string {
  if (n === 'string') {
    return 'you passed string' + n;
  }
  if (n === 'number') {
    return 'you passed number' + n;
  }

  return ''
}

//concluesion function overload is not that diffrent from regular function only allows you to 
//specify exact type arguments eventually combining into union types (which btw is always last in function overload)

passStringOrNumber(4);
passStringOrNumber('4');
passStringOrNumber({4}); //not included in function overload


               </example>
           </paragraph>
           <subtitle>next to fill</subtitle>
           <paragraph>
               <info>Functional compoent in again Stateless compoents that accepts props as function argument and returns JSX syntax</info>
               <example>
------------------------- Functional Stateless component-----------

 const FunctionalComponent = (props) => &lt;p>I am functional component&lt;/p>

ReactDOM.render(&lt;FunctionalComponent name="Greg" />,document.getElementById('app'));

-----------------------------------------------------------------
               </example>
           </paragraph>                  
       </content>
   </chapter>
  <chapter>
      <subject>Type casting</subject>
      <content>
          <subtitle>Type casting with html elements</subtitle>
          <paragraph>
              <info>Type casting is the way to tell typescript that the type needed to be used U will provide better, typescript type assumption it not takken.</info>
              <example>
---------------- jsx single Line--------------

//by default typescirpt takes input as HTMLElement and doesnt allow to access input.value property we know it exists

const inputElement = document.getElementById('ss'); 
inputElement.value //produces error cause it doesnt exist on HTMLElement

1. one way is to set type before document

const inputElement = &lt;HTMLInputElement>document.getElementById('ss');


2. or for the JSX or TSX files use 'as' operator

const inputElement = document.getElementById('ss') as HTMLInputElement;


------------------------------------------------
              </example>
          </paragraph>
          <subtitle>type casting not null values</subtitle>
          <paragraph>
              <info>typescript has a syntax of 

                element.current!.value 

                where element.current! assures that 
                element that current can not be never null or undefined</info>
              <example>
---------------- not null value for HTML element--------------

const DomElement = document.getElementByID('id')!

//the above way we ensure that DomElement is never undefined or null
------------------------------------------------
              </example>
          </paragraph>
      </content>
  </chapter>
 </chapters>