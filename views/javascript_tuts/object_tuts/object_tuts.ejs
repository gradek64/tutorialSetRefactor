<html lang="en"><head>
  <meta charset="UTF-8">  
  <title>tutorial === Layout</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/css/tutorial.css">
  <link rel="stylesheet" href="/css/tooltip.css">
  <script src="scripts/nav-links.js"></script>
<script src="scripts/tooltips_links_over.js"></script>
<script src="scripts/search_nav.js"></script>
</head>
<body translate="no">
<div class="l-site">
  <div class="l-nav">
    <nav class="nav">
      <input type="text" placeholder="Search" id="search">
      <div style="clear: both;"></div>
      <!-- nunjucks loop-->
            
<ul class="links">
    
      <li class="nav-primary tooltip"><a href="#">Object in general</a><span class="tooltiptext">Object in general</span>
                 
      </li>
    
      <li class="nav-primary tooltip"><a href="#">looping through Object</a><span class="tooltiptext">looping through Object</span>
                  
                    <ul class="linksNested">
                          
                          <li class="nav-primary tooltip"><a href="#" partition>Object.keys.forEach(callback)</a><span class="tooltiptext">Object.keys.forEach(callback)</span>
                           
                          <li class="nav-primary tooltip"><a href="#" partition>for (var key in Object) loop</a><span class="tooltiptext">for (var key in Object) loop</span>
                        
                    </ul>
                
      </li>
    
      <li class="nav-primary tooltip"><a href="#">Ways to copy Object</a><span class="tooltiptext">Ways to copy Object</span>
                  
                    <ul class="linksNested">
                          
                          <li class="nav-primary tooltip"><a href="#" partition>by looping throuh and assing properties and methods</a><span class="tooltiptext">by looping throuh and assing properties and methods</span>
                           
                          <li class="nav-primary tooltip"><a href="#" partition>Object.assign({}, orginalObj)</a><span class="tooltiptext">Object.assign({}, orginalObj)</span>
                           
                          <li class="nav-primary tooltip"><a href="#" partition>Object.assign() join objects</a><span class="tooltiptext">Object.assign() join objects</span>
                           
                          <li class="nav-primary tooltip"><a href="#" partition>ES6 spread operator</a><span class="tooltiptext">ES6 spread operator</span>
                        
                    </ul>
                
      </li>
    
      <li class="nav-primary tooltip"><a href="#">Object.prototype</a><span class="tooltiptext">Object.prototype</span>
                  
                    <ul class="linksNested">
                          
                          <li class="nav-primary tooltip"><a href="#" partition>classical Inheritance</a><span class="tooltiptext">classical Inheritance</span>
                           
                          <li class="nav-primary tooltip"><a href="#" partition>&gt;prototypal Inheritance with Object.create()</a><span class="tooltiptext">&gt;prototypal Inheritance with Object.create()</span>
                        
                    </ul>
                
      </li>
    
      <li class="nav-primary tooltip"><a href="#">Obeject get or set value</a><span class="tooltiptext">Obeject get or set value</span>
                  
                    <ul class="linksNested">
                          
                          <li class="nav-primary tooltip"><a href="#" partition>Object setter()</a><span class="tooltiptext">Object setter()</span>
                           
                          <li class="nav-primary tooltip"><a href="#" partition>getter() and setter() together</a><span class="tooltiptext">getter() and setter() together</span>
                        
                    </ul>
                
      </li>
    
      <li class="nav-primary tooltip"><a href="#">aget</a><span class="tooltiptext">aget</span>
                 
      </li>
    
</ul>

       <!-- nunjucks loop-->
    </nav>
  </div>
  <div class="l-page">
    <div class="menu">
      <div class="menu-hamburger"></div>
    </div>
      <!-- nunjucks loop-->
          
<div class="sectionWrapper">
  <div class="sectionContainer">
   
      
      <section  class="band band-b activeSection"  class="band band-b">
          <h1> Object in general </h1> 
          

            
              <div class="band-container">
                <div class="band-inner">

                  <p>Object in general</p>
                  <div class="codeWraper">
                    <code>1 usual syntax

const jane = {
   name: &#39;Jane&#39;,
   likes: &#39;ice-cream&#39;,

   describe: function () {
       return &#39;Person named &#39;+this.name;
   }
};

//show all keys in object, it will return keys as array not including prototypes methods and properties;
Object.keys(jane); 

//exclude any inherited (prototypal) method and properties by:
objName.hasOwnProperty(prop); //true or false depends what type of property is looping on;

-------------- converting object to String -------------


  var bjj = {gaga:&quot;gaga&quot;,gag:2}

  JSON.sringify(bjj)      //return &quot;{&quot;gaga:&quot;:&quot;gaga&quot;,&quot;gag&quot;:2}&quot;



-------------- converting String to Object -------------

  str= &quot;{&quot;gaga:&quot;:&quot;gaga&quot;,&quot;gag&quot;:2}&quot;&quot;

  JSON.parse(str);      

  //return {gaga:&quot;gaga&quot;,gag:2};</code>
                  </div>
                </div>
              </div>
            

      </section>
  
      
      <section   class="band band-b" class="band band-b">
          <h1> looping through Object </h1> 
          
              <div class="band-container partition first" part="part-1">
                <div class="band-inner">

                  <p>Object.keys.forEach(callback)</p>
                  <div class="codeWraper">
                    <code>//1 as Object.keys(objName) return an Array with properties and methods we can do lots of it including loops as 

// 1.forEach();
  changeValues = [&#39;Greg&#39;,&#39;indian food&#39;]
  Object.keys(jane).forEach((e,i)=&gt;{
      if(changeValues[i]){
        jane[e] = changeValues[i];
      }
  });
  console.log(jane);</code>
                  </div>
                </div>
              </div>
            
              <div class="band-container partition " part="part-2">
                <div class="band-inner">

                  <p>for (var key in Object):
				//this method requires checking for Object.hasOwnProperty(key) cause it will loop through prototype properties and methods as well;</p>
                  <div class="codeWraper">
                    <code>//example 

	for (var key in jane) {
if( jane.hasOwnProperty(key) ){
    console.log(key);
}
} //this method requires checking for Object.hasOwnProperty(key) cause it will loop through prototype properties and methods;</code>
                  </div>
                </div>
              </div>
            

            

      </section>
  
      
      <section   class="band band-b" class="band band-b">
          <h1> Ways to copy Object </h1> 
          
              <div class="band-container partition first" part="part-1">
                <div class="band-inner">

                  <p>by looping throuh and assing properties and methods: 
	            	old-school way of copying object;</p>
                  <div class="codeWraper">
                    <code>/*
    Important:

    using  for (key in originalObj) {} loop or Object.assign({},orinalObject) wont make nested object {a:{b:&#39;nested to a&#39;}}
    independend so making changes to original nested object it will affect orinal object and vice-versa; 

*/

let objCopy = {}; // objCopy will store a copy of the originalObj
 const copy = (originalObj) =&gt; {
   for (key in originalObj) {
     if(originalObj.hasOwnProperty(key)){
        objCopy[key] = originalObj[key]; // copies each property to the objCopy object except prototype;
     }
   }
 }</code>
                  </div>
                </div>
              </div>
            
              <div class="band-container partition " part="part-2">
                <div class="band-inner">

                  <p>Object.assign({}, orginalObj):
				this will make &#39;shalow copy&#39; so if there is a nested object it wont be exclude from original object
				only top level structure will be independent.</p>
                  <div class="codeWraper">
                    <code>//example 

const objectAssignCopy = Object.assign({}, originalObj);

//prove that changes to nested object will affect both objects;

//change to copy;
objectAssignCopy.c.x = 20;

console.log(objectAssignCopy.c.x) //20
console.log(originalObj.c.x) //20</code>
                  </div>
                </div>
              </div>
            
              <div class="band-container partition " part="part-3">
                <div class="band-inner">

                  <p>Object.assign() join object</p>
                  <div class="codeWraper">
                    <code>//example 

const obj = {orginalProperty:&#39;I am original property value&#39;};
const joinObj = Object.assign(obj, {newProperty:&#39;I am a new Property&#39;});	
console.log(joinObj);</code>
                  </div>
                </div>
              </div>
            
              <div class="band-container partition " part="part-4">
                <div class="band-inner">

                  <p>ES6 spread operator (still shallow copy)</p>
                  <div class="codeWraper">
                    <code>//example 

var obj2 = { foo: &#39;baz&#39;, y: 13 };

var clonedObj = { ...obj1 };

var mergedObj = { ...obj1, ...obj2 };

//check if nested object are affected when changes are made in copied instances;
obj1.c.y = 45;
console.log(obj1.c.y); //45
console.log(clonedObj.c.y); //45

// so the problem preveils even in ES6 copying method , nested object are not related to copies but to original object.</code>
                  </div>
                </div>
              </div>
            

            

      </section>
  
      
      <section   class="band band-b" class="band band-b">
          <h1> Object.prototype </h1> 
          
              <div class="band-container partition first" part="part-1">
                <div class="band-inner">

                  <p>classical Inheritance: It only makes sense in JS classes which are JS object initiated by the keyword &#39;new&#39; className 
	                            so its constructor will be &#39;className&#39; not &#39;Object . It is possible to create prototype chain on regular Objects but the prototype chain will apear in every possible obects in your app as Arrays,objects etc. so U definitelly should not.</p>
                  <div class="codeWraper">
                    <code>//example 

//1. Create a class; 
function Person(name){
        var _self = this;
        this.likedoing = function(likeDoing){
              return _self.name + &#39;likes doing&#39;+ likeDoing;
        }

}

//2. attach object to prototype so start the prototype chain;

Person.prototype.name = &#39;Anonimous&#39;;
Person.prototype.getName = function(){
    return &#39;your name on prototype started in Person is: &#39; + this.name;
};

//3. make an instance of Person Class;
const person = new Person();

//4. create child Class that later inherits from Parent;

function Student(name){
        var _self = this;
        this.isLearning = function(what){
              return _self.name + &#39; is learning &#39;+ what;
        }
}
  
/*5.
        the most important chaining;
*/
        Student.prototype = Person.prototype;

//6. initiate your student Class;
const student = new Student();

//7. now it is chained you can call Person.name from Student or getName();

console.log(student.name) //return Anonimous
console.log(student.likedoing()); //throws an errror is not on a prototype chain;
student.isLearning(&#39;js&#39;)  // &quot;Anonimous is learningjs&quot;</code>
                  </div>
                </div>
              </div>
            
              <div class="band-container partition " part="part-2">
                <div class="band-inner">

                  <p>&gt;prototypal Inheritance with Object.create():
				prototypal Inheritance: by method Object.create() you will chain the prototype object behind the scenes.</p>
                  <div class="codeWraper">
                    <code>//example 

//1. Create a class; 
function Person(name){
        var _self = this;
        this.likedoing = function(likeDoing){
              return _self.name + &#39;likes doing&#39;+ likeDoing;
        }

}

//2. attach object to prototype so start the prototype chain;

Person.prototype.name = &#39;Anonimous&#39;;
Person.prototype.getName = function(){
    return &#39;your name on prototype started in Person is: &#39; + this.name;
};

//3. make an instance of Person Class;
const person = new Person();

//4. create child Class that later inherits from Parent;

function Student(name){
        var _self = this;
        this.isLearning = function(what){
              return _self.name + &#39; is learning &#39;+ what;
        }
}

/*5.
      the most important chaining;
*/

Student.prototype = Object.create(
  Person.prototype,
  {
    bar_prop: {
      value: &quot;bar val&quot;
    }
  }
);

//6. initiate your student Class;
const student = new Student();

//7. now it is chained you can call Person.name from Student or getName();

console.log(student.name) //return Anonimous
console.log(student.likedoing()); //throws an errror is not on a prototype chain;
student.isLearning(&#39;js&#39;)  // &quot;Anonimous is learningjs&quot;</code>
                  </div>
                </div>
              </div>
            

            

      </section>
  
      
      <section   class="band band-b" class="band band-b">
          <h1> Obeject get or set value </h1> 
          
              <div class="band-container partition first" part="part-1">
                <div class="band-inner">

                  <p>Object setter();
                    The set syntax binds an object property to a function to be called. Setters are most often used in conjunction with getters to create a type of pseudo-property</p>
                  <div class="codeWraper">
                    <code>//example 

const language = {
  set current(name) {
    this.log.push(name);
  },
  log: []
}              
 
language.current = &#39;EN&#39;;
console.log(language.log); // [&#39;EN&#39;]

language.current = &#39;FA&#39;;
console.log(language.log); // [&#39;EN&#39;, &#39;FA&#39;];


//2. difine a setter();
var originalObj = {originalProperty: 0};

Object.defineProperty(originalObj, &#39;setProperty&#39;, { set: function(x) { this.originalProperty = x / 2; } });

// Runs the setter, which assigns 10 / 2 (5) to the &#39;originalProperty&#39;;
originalObj.setProperty = 10; 
console.log(originalObj.originalProperty) // 5

//3. use variable to set setter();

var expr = &#39;foo&#39;;

var obj = {
  baz: &#39;bar&#39;,
  set [expr](v) { this.baz = v; }
};

console.log(obj.baz); // &quot;bar&quot;
obj.foo = &#39;baz&#39;;      // run the setter
console.log(obj.baz); // &quot;baz&quot;</code>
                  </div>
                </div>
              </div>
            
              <div class="band-container partition " part="part-2">
                <div class="band-inner">

                  <p>getter() and setter() together:
	           	the best is to specify getter and setter in conjunction</p>
                  <div class="codeWraper">
                    <code>//example
var obj = {
 a: 7,
 get value() { 
   return this.a + 1;
 },
 set value(x) {
   this.a = x / 2;
 }
};

//get
console.log(obj.value); // 8
//set
obj.value = 50;
console.log(obj.value); // 25


//2. define getter and setter on Date.prototype Object;

var d = Date.prototype;
Object.defineProperty(d, &#39;year&#39;, {
 get: function() { return this.getFullYear(); },
 set: function(y) { this.setFullYear(y); }
});

var now = new Date();
console.log(now.year); // 2000
now.year = 2001; // 987617605170
console.log(now);// Wed Apr 18 11:13:25 GMT-0700 (Pacific Daylight Time) 2001</code>
                  </div>
                </div>
              </div>
            

            

      </section>
  
      
      <section   class="band band-b" class="band band-b">
          <h1> aget </h1> 
          

            
              <div class="band-container">
                <div class="band-inner">

                  <p>gatew</p>
                  <div class="codeWraper">
                    <code>gaghqa</code>
                  </div>
                </div>
              </div>
            

      </section>
  
  
    <section class="band band-b activeSection">
      <h1></h1>

      



        

    </section>
  
  </div>
</div>

       <!-- nunjucks loop-->
  </div>
</div>
 </body></html>